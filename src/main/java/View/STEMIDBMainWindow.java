package View;

import Controller.STEMScholarDAO;
import Controller.STEMScholarDAOExcel;
import Controller.STEMScholarDAOText;
import Controller.STEMStudentDAO;
import Controller.STEMStudentDAOExcel;
import Controller.STEMStudentDAOText;
import Model.STEMScholar;
import Model.STEMStudent;
import Model.Student;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
/**
 *  TODO:
 *      Default select student or grey out buttons when none selected
 */
public class STEMIDBMainWindow extends javax.swing.JFrame 
{
    private DisplayWindow display;
    private AddUpdateScholarWindow addUpdtSch;
    private AddUpdateStudentWindow addUpdtStd;
    private Graphs graphs;
    private LocationHeatMapWindow LHMap;
    private ScholarStudentDataTable dataTable;
    private FileLoadSaveWindow loadSaveWindow;
    private STEMScholarDAO scholarDao;
    private STEMStudentDAO studentDao;
    private TreeMap<String,Student> scholars;
    private TreeMap<String,Student> students;
    /**
     * Creates new form STEMIDBMainWindow
     */
    public STEMIDBMainWindow() 
    {
        this.scholarDao = new STEMScholarDAOText();
        this.scholars = this.scholarDao.getMap();
        this.studentDao = new STEMStudentDAOText();
        this.students = this.studentDao.getMap();
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("STEM Interactive Database");
    }

    // Return an array of formatted strings for scholars
    public String[] getScholars()
    {
        this.scholars = this.scholarDao.getMap();
        ArrayList<String> scholarsArray = new ArrayList<>();
        for (Map.Entry scholar : scholars.entrySet())
        {
            STEMScholar s = (STEMScholar) scholar.getValue();
            scholarsArray.add("  " + s.getStudentID() +
                    "                    " + s.getFullName());
        }
        Object[] convertedArray = scholarsArray.toArray();
        String[] newScholarsArray = new String[convertedArray.length];
        for (int i = 0; i < convertedArray.length; i++)
        {
            newScholarsArray[i] = (String) convertedArray[i];
        }
        return newScholarsArray;
    }
    
    // Return an array of formatted strings for students
    public String[] getStudents()
    {
        this.students = this.studentDao.getMap();
        ArrayList<String> studentsArray = new ArrayList<>();
        for (Map.Entry student : students.entrySet())
        {
            STEMStudent s = (STEMStudent) student.getValue();
            studentsArray.add("  " + s.getStudentID() +
                    "                         " + s.getFullName());
        }
        Object[] convertedArray = studentsArray.toArray();
        String[] newStudentsArray = new String[convertedArray.length];
        for (int i = 0; i < convertedArray.length; i++)
        {
            newStudentsArray[i] = (String) convertedArray[i];
        }
        return newStudentsArray;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jScholarsPanel = new javax.swing.JPanel();
        jScholarsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListScholars = new javax.swing.JList<>();
        jDisplayButtonScholars = new javax.swing.JToggleButton();
        jUpdateButtonScholars = new javax.swing.JToggleButton();
        jDeleteButtonScholars = new javax.swing.JToggleButton();
        jAddButtonScholars = new javax.swing.JButton();
        jScholarsIDLabel = new javax.swing.JLabel();
        jScholarsNameLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jStudentsPanel = new javax.swing.JPanel();
        jStudentsLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListStudents = new javax.swing.JList<>();
        jDisplayButtonStudents = new javax.swing.JToggleButton();
        jUpdateButtonStudents = new javax.swing.JToggleButton();
        jDeleteButtonStudents = new javax.swing.JToggleButton();
        jAddButtonStudents = new javax.swing.JButton();
        jStudentsIDLabel = new javax.swing.JLabel();
        jStudentsNameLabel = new javax.swing.JLabel();
        jSSTEMIDBLabel = new javax.swing.JLabel();
        jDisplaysPanel = new javax.swing.JPanel();
        jDisplaysLabel = new javax.swing.JLabel();
        jTabelButton = new javax.swing.JButton();
        jGraphButton = new javax.swing.JButton();
        jMapButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        jFileManagerPanel = new javax.swing.JPanel();
        jButtonFileLoad = new javax.swing.JButton();
        jFileManager = new javax.swing.JLabel();
        jButtonFileSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusTraversalPolicyProvider(true);
        setResizable(false);

        jScholarsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jScholarsLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jScholarsLabel.setText(" SCHOLARS");
        jScholarsLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jListScholars.setModel(new javax.swing.AbstractListModel<String>(){
            public int getSize() { return getScholars().length; }
            public String getElementAt(int i) { return getScholars()[i]; }
        });
        jListScholars.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane1.setViewportView(jListScholars);

        buttonGroup1.add(jDisplayButtonScholars);
        jDisplayButtonScholars.setText("Details");
        jDisplayButtonScholars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDisplayButtonScholarsActionPerformed(evt);
            }
        });

        buttonGroup1.add(jUpdateButtonScholars);
        jUpdateButtonScholars.setText("Update");
        jUpdateButtonScholars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateButtonScholarsActionPerformed(evt);
            }
        });

        buttonGroup1.add(jDeleteButtonScholars);
        jDeleteButtonScholars.setText("Delete");
        jDeleteButtonScholars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteButtonScholarsActionPerformed(evt);
            }
        });

        jAddButtonScholars.setText("Add");
        jAddButtonScholars.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jAddButtonScholars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddButtonScholarsActionPerformed(evt);
            }
        });

        jScholarsIDLabel.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        jScholarsIDLabel.setText("ID");

        jScholarsNameLabel.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        jScholarsNameLabel.setText("Name");

        javax.swing.GroupLayout jScholarsPanelLayout = new javax.swing.GroupLayout(jScholarsPanel);
        jScholarsPanel.setLayout(jScholarsPanelLayout);
        jScholarsPanelLayout.setHorizontalGroup(
            jScholarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jScholarsPanelLayout.createSequentialGroup()
                .addGroup(jScholarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jScholarsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jScholarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jScholarsPanelLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jDisplayButtonScholars, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jUpdateButtonScholars)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jDeleteButtonScholars)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jAddButtonScholars, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jScholarsPanelLayout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(jScholarsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jScholarsPanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jScholarsIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScholarsNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );
        jScholarsPanelLayout.setVerticalGroup(
            jScholarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jScholarsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jScholarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jScholarsPanelLayout.createSequentialGroup()
                        .addComponent(jScholarsLabel)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jScholarsPanelLayout.createSequentialGroup()
                        .addGroup(jScholarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jScholarsIDLabel)
                            .addComponent(jScholarsNameLabel))
                        .addGap(3, 3, 3)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jScholarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDisplayButtonScholars)
                    .addComponent(jUpdateButtonScholars)
                    .addComponent(jDeleteButtonScholars))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jAddButtonScholars, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );

        jStudentsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jStudentsLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jStudentsLabel.setText("  STUDENTS");
        jStudentsLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jListStudents.setModel(new javax.swing.AbstractListModel<String>(){
            public int getSize() { return getStudents().length; }
            public String getElementAt(int i) { return getStudents()[i]; }
        });
        jListStudents.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane2.setViewportView(jListStudents);

        buttonGroup2.add(jDisplayButtonStudents);
        jDisplayButtonStudents.setText("Details");
        jDisplayButtonStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDisplayButtonStudentsActionPerformed(evt);
            }
        });

        buttonGroup2.add(jUpdateButtonStudents);
        jUpdateButtonStudents.setText("Update");
        jUpdateButtonStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateButtonStudentsActionPerformed(evt);
            }
        });

        buttonGroup2.add(jDeleteButtonStudents);
        jDeleteButtonStudents.setText("Delete");
        jDeleteButtonStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteButtonStudentsActionPerformed(evt);
            }
        });

        jAddButtonStudents.setText("Add");
        jAddButtonStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddButtonStudentsActionPerformed(evt);
            }
        });

        jStudentsIDLabel.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        jStudentsIDLabel.setText("ID");

        jStudentsNameLabel.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        jStudentsNameLabel.setText("Name");

        javax.swing.GroupLayout jStudentsPanelLayout = new javax.swing.GroupLayout(jStudentsPanel);
        jStudentsPanel.setLayout(jStudentsPanelLayout);
        jStudentsPanelLayout.setHorizontalGroup(
            jStudentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jStudentsPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jDisplayButtonStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jUpdateButtonStudents)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jDeleteButtonStudents)
                .addGap(27, 27, 27))
            .addGroup(jStudentsPanelLayout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jStudentsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jStudentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jStudentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .addComponent(jAddButtonStudents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jStudentsPanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jStudentsIDLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jStudentsNameLabel)
                .addGap(53, 53, 53))
        );
        jStudentsPanelLayout.setVerticalGroup(
            jStudentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jStudentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jStudentsLabel)
                .addGap(1, 1, 1)
                .addGroup(jStudentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jStudentsIDLabel)
                    .addComponent(jStudentsNameLabel))
                .addGap(2, 2, 2)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jStudentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDisplayButtonStudents)
                    .addComponent(jUpdateButtonStudents)
                    .addComponent(jDeleteButtonStudents))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jAddButtonStudents)
                .addContainerGap())
        );

        jSSTEMIDBLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 2, 14)); // NOI18N
        jSSTEMIDBLabel.setText("  STEM Interactive Database");

        jDisplaysPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jDisplaysLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jDisplaysLabel.setText("   DISPLAYS");
        jDisplaysLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTabelButton.setText("Table");
        jTabelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTabelButtonActionPerformed(evt);
            }
        });

        jGraphButton.setText("Graphs");
        jGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGraphButtonActionPerformed(evt);
            }
        });

        jMapButton.setText("Map");
        jMapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMapButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDisplaysPanelLayout = new javax.swing.GroupLayout(jDisplaysPanel);
        jDisplaysPanel.setLayout(jDisplaysPanelLayout);
        jDisplaysPanelLayout.setHorizontalGroup(
            jDisplaysPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDisplaysPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jTabelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jDisplaysPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDisplaysLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addComponent(jGraphButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jMapButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jDisplaysPanelLayout.setVerticalGroup(
            jDisplaysPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDisplaysPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDisplaysLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jDisplaysPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jGraphButton)
                    .addComponent(jTabelButton)
                    .addComponent(jMapButton))
                .addContainerGap())
        );

        jFileManagerPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButtonFileLoad.setText("Load");
        jButtonFileLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFileLoadActionPerformed(evt);
            }
        });

        jFileManager.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jFileManager.setText(" FILE ");
        jFileManager.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButtonFileSave.setText("Save");
        jButtonFileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFileSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFileManagerPanelLayout = new javax.swing.GroupLayout(jFileManagerPanel);
        jFileManagerPanel.setLayout(jFileManagerPanelLayout);
        jFileManagerPanelLayout.setHorizontalGroup(
            jFileManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFileManagerPanelLayout.createSequentialGroup()
                .addGroup(jFileManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFileManagerPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jButtonFileLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFileSave, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jFileManagerPanelLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jFileManager)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jFileManagerPanelLayout.setVerticalGroup(
            jFileManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFileManagerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jFileManager)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jFileManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonFileLoad)
                    .addComponent(jButtonFileSave))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(371, 371, 371))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScholarsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jStudentsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(94, 94, 94)
                                .addComponent(jSSTEMIDBLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jDisplaysPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jFileManagerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSSTEMIDBLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScholarsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jStudentsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jDisplaysPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFileManagerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Display data for selected scholar
    private void jDisplayButtonScholarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDisplayButtonScholarsActionPerformed
        this.buttonGroup1.clearSelection();
        this.buttonGroup2.clearSelection();
        if (!this.jListScholars.isSelectionEmpty())
        {
            String id = this.jListScholars.getSelectedValue().substring(2,11);
            Student s = null;
            for (Map.Entry student : this.scholars.entrySet())
            {
                if (student.getKey().equals(id))
                {
                    s = (Student) student.getValue();
                }
            }
            this.display = new DisplayWindow(this, true);
            this.display.displayStudent(s);
            this.display.setVisible(true);
            this.jListScholars.setSelectedValue(null, rootPaneCheckingEnabled);
            this.jListStudents.setSelectedValue(null, rootPaneCheckingEnabled);
        }
    }//GEN-LAST:event_jDisplayButtonScholarsActionPerformed

    // Display data for selected student
    private void jDisplayButtonStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDisplayButtonStudentsActionPerformed
        this.buttonGroup1.clearSelection();
        this.buttonGroup2.clearSelection();
        if (!this.jListStudents.isSelectionEmpty())
        {
            String id = this.jListStudents.getSelectedValue().substring(2,11);
            Student s = null;
            for (Map.Entry student : this.students.entrySet())
            {
                if (student.getKey().equals(id))
                {
                    s = (Student) student.getValue();
                }
            }
            this.display = new DisplayWindow(this, true);
            this.display.displayStudent(s);
            this.display.setVisible(true);
            this.jListScholars.setSelectedValue(null, rootPaneCheckingEnabled);
            this.jListStudents.setSelectedValue(null, rootPaneCheckingEnabled);
        }
    }//GEN-LAST:event_jDisplayButtonStudentsActionPerformed

    // Add entered data as a scholar
    private void jAddButtonScholarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddButtonScholarsActionPerformed
        this.addUpdtSch = new AddUpdateScholarWindow(this, true);
        this.addUpdtSch.setVisible(true);
        STEMScholar scholar = this.addUpdtSch.getScholar();
        if (scholar != null)
            {
                boolean idExists = false;
                for (Map.Entry student : this.students.entrySet())
                {
                    if (student.getKey().equals(scholar.getStudentID()))
                    {
                        idExists = true;
                    }
                }
                // If ID was found in student ID's, do not add scholar, display error
                if (idExists)
                {
                    String message = scholar.getFullName() + " could not be updated.  " 
                        + scholar.getStudentID() + " is already registered to a student.";
                    JOptionPane.showMessageDialog(rootPane, message, "Error!", 0);
                }
                // Attempt to add scholar
                else
                {
                    boolean updated = this.scholarDao.addStudent(scholar);
                    // Scholar ID was available, scholar added
                    if (updated)
                    {
                        String message = scholar.getFullName() + " added successfully.";
                        this.scholarDao = new STEMScholarDAOText();
                        JOptionPane.showMessageDialog(rootPane, message, "", 1);
                    }
                    // Scholar ID was taken, scholar not added, display error
                    else
                    {
                        String message = scholar.getFullName() + " could not be added.  " 
                            + scholar.getStudentID() + " is already registered to another scholar.";
                        JOptionPane.showMessageDialog(rootPane, message, "Error!", 0);
                    }
                }// end else for not idExists
            }// end returned scholar is not null check
        this.jListScholars.setListData(this.getScholars());
        this.jListScholars.setSelectedValue(null, rootPaneCheckingEnabled);
        this.jListStudents.setSelectedValue(null, rootPaneCheckingEnabled);
        this.buttonGroup1.clearSelection();
        this.buttonGroup2.clearSelection();
    }//GEN-LAST:event_jAddButtonScholarsActionPerformed

    // Add entered data as a student
    private void jAddButtonStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddButtonStudentsActionPerformed
        this.addUpdtStd = new AddUpdateStudentWindow(this, true);
        this.addUpdtStd.setVisible(true);
        STEMStudent student = this.addUpdtStd.getStudent();
        if (student != null)
        {
            boolean idExists = false;
            for (Map.Entry scholar : this.scholars.entrySet())
            {
                if (scholar.getKey().equals(student.getStudentID()))
                {
                    idExists = true;
                }
            }
            // If ID was found in scholar ID's, do not add student, display error
            if (idExists)
            {
                String message = student.getFullName() + " could not be updated.  " 
                    + student.getStudentID() + " is already registered to a scholar.";
                JOptionPane.showMessageDialog(rootPane, message, "Error!", 0);
            }
            // Attempt to add student
            else
            {
                boolean updated = this.studentDao.addStudent(student);
                // Student ID was available, student added
                if (updated)
                {
                    String message = student.getFullName() + " added successfully.";
                    this.studentDao = new STEMStudentDAOText();
                    JOptionPane.showMessageDialog(rootPane, message, "", 1);
                }
                // Student ID was taken, student not added, display error
                else
                {
                    String message = student.getFullName() + " could not be added.  " 
                        + student.getStudentID() + " is already registered to another student.";
                    JOptionPane.showMessageDialog(rootPane, message, "Error!", 0);
                }
            }// end else for not idExists
        }// end returned student is not null check
        this.jListStudents.setListData(this.getStudents());
        this.jListScholars.setSelectedValue(null, rootPaneCheckingEnabled);
        this.jListStudents.setSelectedValue(null, rootPaneCheckingEnabled);
        this.buttonGroup1.clearSelection();
        this.buttonGroup2.clearSelection();
    }//GEN-LAST:event_jAddButtonStudentsActionPerformed

    // Display AddUpateScholarWindow in update scholar view, then update selected scholar
    private void jUpdateButtonScholarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateButtonScholarsActionPerformed
        this.buttonGroup1.clearSelection();
        this.buttonGroup2.clearSelection();
        if (!this.jListScholars.isSelectionEmpty())
        {
            String id = this.jListScholars.getSelectedValue().substring(2,11);
            STEMScholar s = null;
            for (Map.Entry student : this.scholars.entrySet())
            {
                if (student.getKey().equals(id))
                {
                    s = (STEMScholar) student.getValue();
                }
            }
            this.addUpdtSch = new AddUpdateScholarWindow(this, true);
            addUpdtSch.updateScholar(s);
            this.addUpdtSch.setVisible(true);
            STEMScholar scholar = this.addUpdtSch.getScholar();
            if (scholar != null)
            {
                boolean idExists = false;
                for (Map.Entry student : this.students.entrySet())
                {
                    if (student.getKey().equals(scholar.getStudentID()))
                    {
                        idExists = true;
                    }
                }
                // If ID was found in student ID's, do not update scholar, display error
                if (idExists)
                {
                    String message = scholar.getFullName() + " could not be updated.  " 
                        + scholar.getStudentID() + " is already registered to a student.";
                    JOptionPane.showMessageDialog(rootPane, message, "Error!", 0);
                }
                // Attempt to update scholar
                else
                {
                    boolean updated = this.scholarDao.updateStudent(id, scholar);
                    // Scholar ID was available, scholar updated
                    if (updated)
                    {
                        String message = scholar.getFullName() + " updated successfully.";
                        this.scholarDao = new STEMScholarDAOText();
                        JOptionPane.showMessageDialog(rootPane, message, "", 1);
                    }
                    // Scholar ID was taken, scholar not updated, display error
                    else
                    {
                        String message = scholar.getFullName() + " could not be updated.  " 
                            + scholar.getStudentID() + " is already registered to another scholar.";
                        JOptionPane.showMessageDialog(rootPane, message, "Error!", 0);
                    }
                }// end else for not idExists
            }// end returned scholar is not null check
            this.jListScholars.setSelectedValue(null, rootPaneCheckingEnabled);
            this.jListStudents.setSelectedValue(null, rootPaneCheckingEnabled);
        }
    }//GEN-LAST:event_jUpdateButtonScholarsActionPerformed

    // Display AddUpateStudentWindow in update student view, then update selected student
    private void jUpdateButtonStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateButtonStudentsActionPerformed
        this.buttonGroup1.clearSelection();
        this.buttonGroup2.clearSelection();
        if (!this.jListStudents.isSelectionEmpty())
        {
            String id = this.jListStudents.getSelectedValue().substring(2,11);
            STEMStudent s = null;
            for (Map.Entry student : this.students.entrySet())
            {
                if (student.getKey().equals(id))
                {
                    s = (STEMStudent) student.getValue();
                }
            }
            this.addUpdtStd = new AddUpdateStudentWindow(this, true);
            addUpdtStd.updateStudent(s);
            this.addUpdtStd.setVisible(true);
            STEMStudent student = this.addUpdtStd.getStudent();
            if (student != null)
            {
                boolean idExists = false;
                for (Map.Entry scholar : this.scholars.entrySet())
                {
                    if (scholar.getKey().equals(student.getStudentID()))
                    {
                        idExists = true;
                    }
                }
                // If ID was found in scholar ID's, do not update student, display error
                if (idExists)
                {
                    String message = student.getFullName() + " could not be updated.  " 
                        + student.getStudentID() + " is already registered to a scholar.";
                    JOptionPane.showMessageDialog(rootPane, message, "Error!", 0);
                }
                // Attempt to update student
                else
                {
                    boolean updated = this.studentDao.updateStudent(id, student);
                    // Student ID was available, student updated
                    if (updated)
                    {
                        String message = student.getFullName() + " updated successfully.";
                        this.studentDao = new STEMStudentDAOText(); // refresh DAO
                        JOptionPane.showMessageDialog(rootPane, message, "", 1);
                    }
                    // Student ID was taken, student not updated, display error
                    else
                    {
                        String message = student.getFullName() + " could not be updated.  " 
                            + student.getStudentID() + " is already registered to another student.";
                        JOptionPane.showMessageDialog(rootPane, message, "Error!", 0);
                    }
                }// end else for not idExists
            }// end returned student is not null check
        this.jListScholars.setSelectedValue(null, rootPaneCheckingEnabled);
        this.jListStudents.setSelectedValue(null, rootPaneCheckingEnabled);
        }
    }//GEN-LAST:event_jUpdateButtonStudentsActionPerformed

    // Delete selected scholar
    private void jDeleteButtonScholarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteButtonScholarsActionPerformed
        this.buttonGroup1.clearSelection();
        this.buttonGroup2.clearSelection();
        if (!this.jListScholars.isSelectionEmpty())
        {
            String id = this.jListScholars.getSelectedValue().substring(2,11);
            STEMScholar s = null;
            for (Map.Entry student : this.scholars.entrySet())
            {
                if (student.getKey().equals(id))
                {
                    s = (STEMScholar) student.getValue();
                }
            }
            String message = "Are you sure you want to delete all data for "
                + s.getFullName() + "?";
            int choice = JOptionPane.showConfirmDialog(rootPane, message);
            if (choice == 0)
            {
                scholarDao.deleteStudent(id);
                this.scholarDao = new STEMScholarDAOText();
                this.jListScholars.setListData(this.getScholars());
            }
            this.jListScholars.setSelectedValue(null, rootPaneCheckingEnabled);
            this.jListStudents.setSelectedValue(null, rootPaneCheckingEnabled);
        }
    }//GEN-LAST:event_jDeleteButtonScholarsActionPerformed

    // Delete selected student
    private void jDeleteButtonStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteButtonStudentsActionPerformed
        this.buttonGroup1.clearSelection();
        this.buttonGroup2.clearSelection();
        if (!this.jListStudents.isSelectionEmpty())
        {
            String id = this.jListStudents.getSelectedValue().substring(2,11);
            STEMStudent s = null;
            for (Map.Entry student : this.students.entrySet())
            {
                if (student.getKey().equals(id))
                {
                    s = (STEMStudent) student.getValue();
                }
            }
            String message = "Are you sure you want to delete all data for " 
                + s.getFullName() + "?";
            int choice = JOptionPane.showConfirmDialog(rootPane, message);
            if (choice == 0)
            {
                studentDao.deleteStudent(id);
                this.studentDao = new STEMStudentDAOText();
                this.jListStudents.setListData(this.getStudents());
            }
            this.jListScholars.setSelectedValue(null, rootPaneCheckingEnabled);
            this.jListStudents.setSelectedValue(null, rootPaneCheckingEnabled);
        }
    }//GEN-LAST:event_jDeleteButtonStudentsActionPerformed

    // Display data in tabular format
    private void jTabelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTabelButtonActionPerformed
        this.dataTable = new ScholarStudentDataTable(this, true);
        this.dataTable.setVisible(true);
    }//GEN-LAST:event_jTabelButtonActionPerformed

    // Display Graphs window
    private void jGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGraphButtonActionPerformed
        this.graphs = new Graphs(this, true);  
        this.graphs.setSize(800, 400);  
        this.graphs.setLocationRelativeTo(null);  
        this.graphs.setVisible(true);  
    }//GEN-LAST:event_jGraphButtonActionPerformed

    // Load new scholar/student data from attached excel workbook
    private void jButtonFileLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFileLoadActionPerformed
        FileLoadSaveWindow.setLoadSave(FileLoadSaveWindow.LOAD);
        this.loadSaveWindow = new FileLoadSaveWindow(this, true);
        this.loadSaveWindow.setVisible(true);
        if (this.loadSaveWindow.isActionScholars())
        {
            updateScholarsFile();
        }
        if (this.loadSaveWindow.isActionStudents())
        {
            updateStudentsFile();
        }
    }//GEN-LAST:event_jButtonFileLoadActionPerformed
    
    // Assign new scholar data through scholar sheet in attached excel workbook
    private void updateScholarsFile()
    {
        this.scholarDao = new STEMScholarDAOExcel();
        this.scholarDao.save();
        this.scholarDao = new STEMScholarDAOText();
        this.scholars = this.scholarDao.getMap();
        this.jListScholars.setListData(getScholars());   
    }
    
    // Assign new student data through scholar sheet in attached excel workbook
    private void updateStudentsFile()
    {
        this.studentDao = new STEMStudentDAOExcel();
        this.studentDao.save();
        this.studentDao = new STEMStudentDAOText();
        this.students = this.studentDao.getMap();
        this.jListStudents.setListData(getStudents());
    }
    
    // Save new scholar file based on internal state
    private void saveNewScholarFile()
    {
        try
        {
            STEMScholarDAOExcel dao = new STEMScholarDAOExcel();
            dao.saveNewExcelSheet(this.scholars);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(rootPane, e.toString(), "Error!", 0);
        }       
    }
    
    // Save new student file based on internal state
    private void saveNewStudentFile()
    {
        try
        {
            STEMStudentDAOExcel dao = new STEMStudentDAOExcel();
            dao.saveNewExcelSheet(this.students);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(rootPane, e.toString(), "Error!", 0);
        }
    }
    
    // Display LocationHeatMapWindow
    private void jMapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMapButtonActionPerformed
        try 
        {
            this.LHMap = new LocationHeatMapWindow(this, true);
        } 
        catch (IOException ex) 
        {
            // Log and Display error
            Logger.getLogger(STEMIDBMainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, ex, "Error!", 0);
        } 
    }//GEN-LAST:event_jMapButtonActionPerformed

    // Save stored data into new excel workbook
    private void jButtonFileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFileSaveActionPerformed
        FileLoadSaveWindow.setLoadSave(FileLoadSaveWindow.SAVE);
        this.loadSaveWindow = new FileLoadSaveWindow(this, true);
        this.loadSaveWindow.setVisible(true);
        if (this.loadSaveWindow.isActionScholars())
        {
            saveNewScholarFile();
        }
        if (this.loadSaveWindow.isActionStudents())
        {
            saveNewStudentFile();
        }
    }//GEN-LAST:event_jButtonFileSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(STEMIDBMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(STEMIDBMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(STEMIDBMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(STEMIDBMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() 
            {
                new STEMIDBMainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JButton jAddButtonScholars;
    private javax.swing.JButton jAddButtonStudents;
    private javax.swing.JButton jButtonFileLoad;
    private javax.swing.JButton jButtonFileSave;
    private javax.swing.JToggleButton jDeleteButtonScholars;
    private javax.swing.JToggleButton jDeleteButtonStudents;
    private javax.swing.JToggleButton jDisplayButtonScholars;
    private javax.swing.JToggleButton jDisplayButtonStudents;
    private javax.swing.JLabel jDisplaysLabel;
    private javax.swing.JPanel jDisplaysPanel;
    private javax.swing.JLabel jFileManager;
    private javax.swing.JPanel jFileManagerPanel;
    private javax.swing.JButton jGraphButton;
    private javax.swing.JList<String> jListScholars;
    private javax.swing.JList<String> jListStudents;
    private javax.swing.JButton jMapButton;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jSSTEMIDBLabel;
    private javax.swing.JLabel jScholarsIDLabel;
    private javax.swing.JLabel jScholarsLabel;
    private javax.swing.JLabel jScholarsNameLabel;
    private javax.swing.JPanel jScholarsPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jStudentsIDLabel;
    private javax.swing.JLabel jStudentsLabel;
    private javax.swing.JLabel jStudentsNameLabel;
    private javax.swing.JPanel jStudentsPanel;
    private javax.swing.JButton jTabelButton;
    private javax.swing.JToggleButton jUpdateButtonScholars;
    private javax.swing.JToggleButton jUpdateButtonStudents;
    // End of variables declaration//GEN-END:variables
}
